#!/bin/bash

function failed_test() {
  >&2 echo "FAILED: $1"
  exit 24
}

function check_code() {
  if [ $1 -ne 0 ];then
    if [ -n "$2" ]; then
        echo $2
    fi

    echo "Failed command. Exiting immediately"
    exit 1
  fi
}

function prompt() {
  msg="$1"
  answer=""
  while [ "$answer" != "y" ] && [ "$answer" != "n" ]; do
    echo -n "$msg (y/n): "
    read answer
  done
  
  if [ "$answer" == "y" ]; then
    return 0
  else
    return 1
  fi
}

function main_splitter() {
  echo "================================================================================="
}

function sub_splitter() {
  echo "---------------------------------------------------------------------------------"
}

function versions_since() {
  current_version="$1"
  current_version=`echo $current_version | egrep -o '^[0-9]+\.[0-9]+' | sed 's/\./\\./g'`
  # This finds all the upgrade scripts that match upgrade-X.X-X.Y.sql or upgrade-X.X.X-X.Y.Z.sql, sorts them by version and then takes all the scripts that are after the current version by grabbing all the lines that follow the script for the version we're looking for
  # After getting all the scripts, it extracts the second minor version which would be X.Y in the examples above
  versions=`ls /usr/local/pf/db/upgrade-* | egrep '^/usr/local/pf/db/upgrade-[0-9]+\.[0-9]+(\.[0-9]+)?-[0-9]+\.[0-9]+(\.[0-9]+)?\.sql' | sort --version-sort | sed -ne '/'$current_version'/{:a' -e 'n;p;ba' -e '}' | sed -r 's#/usr/local/pf/db/upgrade-[0-9]+\.[0-9]+(\.[0-9]+)?-([0-9]+\.[0-9]+)(\.[0-9]+)?\.sql#\2#g'`
  echo $versions
}

function is_rpm_based() {
  which yum > /dev/null 2>&1
}

function is_deb_based() {
  which apt > /dev/null 2>&1
}

function is_enabled() {
  [ "$1" = "yes" ] || [ "$1" = "enabled" ]
}

function configreload() {
  /usr/local/pf/bin/pfcmd configreload hard && return 0

  # This was found to be necessary in some cases where the first configreload would fail.
  # If the reload did succeed, then it will just ignore this and continue
  echo "Failed to configreload once. Will wait a few seconds and try again"
  sleep 10
  /usr/local/pf/bin/pfcmd configreload hard

  return $?
}

function handle_devel_upgrade() {
  UPGRADE_TO="$1"
  if [ -f /usr/local/pf/db/upgrade-X.X-X.Y.sql ]; then
    main_splitter
    echo "Upgrade to a devel package detected. Renaming DB upgrade schema accordingly"
    sub_splitter
    echo -n "You need to input the PF version that comes before $UPGRADE_TO. This will replace X.X in the upgrade-X.X-X.Y.sql filename. Only input the minor version (ex: 11.2): "
    read UPGRADING_FROM
    cp /usr/local/pf/db/upgrade-X.X-X.Y.sql /usr/local/pf/db/upgrade-$UPGRADING_FROM-$UPGRADE_TO.sql
  fi
}

function output_all_container_images {
  # find all directories with Dockerfile
  # excluding non necessary images
  DOCKERFILE_DIRS=$(find containers/ -type f -name "Dockerfile" \
                         -not -path "*/pfdebian/*" \
                         -not -path "*/radiusd/*" \
                         -not -path "*/pfconnector-*/*" \
                         -printf "%P\n")

  for file in ${DOCKERFILE_DIRS}; do
    # remove /Dockerfile suffix
    CONTAINERS_IMAGES+=" ${file%/Dockerfile}"
  done
  
  for img in ${CONTAINERS_IMAGES}; do
    echo "- $img"
  done
}
