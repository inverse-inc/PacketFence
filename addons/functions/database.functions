#!/bin/bash

function test_db_connection_no_creds() {
  mysql -e 'select 1' &> /dev/null
}

function get_db_name() {
  pf_conf="$1"
  db_name=`perl -MConfig::IniFiles -I/usr/local/pf/lib_perl/lib/perl5/ -e "print Config::IniFiles->new( -file => '$pf_conf')->val("database", "db")"`
  if [ -z "$db_name" ]; then
    db_name=pf
  fi

  echo $db_name
}

function import_mysqldump() {
  grants_file="$1"
  dump_file="$2"
  pf_conf="$3"

  if ! [ -f "$pf_conf" ]; then
    echo "The path to pf.conf is invalid"
    exit 1
  fi

  mariadb_args="--defaults-file=`pwd`/setup_mycnf --socket=/var/lib/mysql/mysql.sock"
  # we need a grant dump generated via: mysql ${MYSQL_CONN} --skip-column-names -A -e"SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user WHERE user<>''" | mysql ${MYSQL_CONN} --skip-column-names -A | sed 's/$/;/g' > grants.sql
  if ! test_db_connection_no_creds; then
    echo -n "Please enter the root password for MariaDB:"
    read -s mariadb_root_pass
    echo
    setup_mycnf $mariadb_root_pass
  else
    touch `pwd`/setup_mycnf
  fi

  db_name=`get_db_name $pf_conf`

  sub_splitter
  echo "Recreating database $db_name"
  mysql ${mariadb_args} -e "drop database if exists $db_name; create database $db_name"

  sub_splitter
  # We reimport the schema so that we have the functions and triggers if the dump doesn't contain the triggers
  if ! egrep "CREATE.*TRIGGER.*(AFTER|BEFORE)" $dump_file > /dev/null; then
    echo "Dump file was made without triggers and procedures"
    # Detect minor version of the restored data
    restoring_version=`egrep -o '[0-9]+\.[0-9]+\.[0-9]+$' usr/local/pf/conf/pf-release | egrep -o '^[0-9]+\.[0-9]+'`
    echo "Importing bare schema for $restoring_version"
    mysql ${mariadb_args} $db_name < /usr/local/pf/db/pf-schema-$restoring_version.sql
    check_code $?

    sub_splitter
    echo "Replacing create statements from the dump and removing drop statements"
    # This is done so that tables aren't dropped
    sed -i "s/^DROP TABLE IF EXISTS /---DROP TABLE IF EXISTS /g" $dump_file
    sed -i "s/CREATE TABLE /CREATE TABLE IF NOT EXISTS /g" $dump_file

    # Delete this statement if its there because this table isn't in our schema anymore but some old deployments have it
    sed -i 's/DELETE IGNORE FROM `dhcp_fingerprint`;//g' $dump_file
    sed -i 's/DELETE IGNORE FROM `action`;//g' $dump_file
    sed -i 's/DELETE IGNORE FROM `activation`;//g' $dump_file

    # We need to drop the data from all the tables that contain data in our bare schema
    # This is because the mysqldump import already contains this data
    mysql ${mariadb_args} $db_name -e 'delete ignore from node_category;'
    mysql ${mariadb_args} $db_name -e 'delete ignore from password;'
    mysql ${mariadb_args} $db_name -e 'delete ignore from person;'
    mysql ${mariadb_args} $db_name -e 'delete ignore from pf_version;'
    mysql ${mariadb_args} $db_name -e 'delete ignore from radreply;'
    mysql ${mariadb_args} $db_name -e 'delete ignore from sms_carrier;'
  else
    echo "Dump file includes triggers and procedures"
  fi

  sub_splitter
  echo "Importing $dump_file into $db_name"
  mysql ${mariadb_args} $db_name < $dump_file
  check_code $?

  sub_splitter
  echo "Importing grants"
  mysql ${mariadb_args} < $grants_file
  check_code $?

}

function import_mariabackup() {
  if ! which mariabackup > /dev/null 2>&1; then
    echo "Missing mariabackup command. Please read the documentation of this script in the Installation guide to prepare your environment before running this script"
    exit 1
  fi

  dump_file="$1"

  sub_splitter
  echo "Extracting the MariaDB backup"
  mkdir restore/
  check_code $?
  mv $dump_file restore/
  check_code $?
  pushd restore/
  check_code $?
  mbstream -x < $dump_file
  check_code $?
  mv $dump_file ../
  check_code $?

  sub_splitter
  echo "Applying innodb logs"
  mariabackup --prepare --target-dir=./

  sub_splitter
  echo "Stopping packetfence-mariadb and backing up the current data"
  systemctl stop packetfence-mariadb
  # This trick is so that it doesn't error out if the pkill fails
  pkill -9 -f mariadbd || echo 1 > /dev/null

  mv /var/lib/mysql/ "/var/lib/mysql-`date +%s`"
  mkdir /var/lib/mysql
  mariabackup --innobackupex --defaults-file=/usr/local/pf/var/conf/mariadb.conf      --move-back --force-non-empty-directories ./
  chown -R mysql: /var/lib/mysql

  sub_splitter
  echo "Removing old ib_logfiles"
  rm -f /var/lib/mysql/ib_logfile*

  sub_splitter
  echo "Starting MariaDB"
  systemctl start packetfence-mariadb
  check_code $?

  sub_splitter
  echo "Performing upgrade of MariaDB. Enter the MariaDB root password if prompted to"
  echo "NOTE: The root password you must enter is the one of the server of which you're reimporting the data, not this server's MariaDB root password"
  mysql_upgrade -p

  popd
}

function get_db_upgrade_scripts() {
  current_version="$1"
  current_version=`echo $current_version | sed 's/\./\\./g'`
  # This finds all the upgrade scripts that match upgrade-X.X-X.Y.sql or upgrade-X.X.X-X.Y.Z.sql, sorts them by version and then takes all the scripts that are after the current version by grabbing all the lines that follow the script for the version we're looking for
  db_scripts=`ls /usr/local/pf/db/upgrade-* | egrep '^/usr/local/pf/db/upgrade-[0-9]+\.[0-9]+(\.[0-9]+)?-[0-9]+\.[0-9]+(\.[0-9]+)?\.sql' | sort --version-sort | sed -ne '/'$current_version'/{:a' -e 'n;p;ba' -e '}'`
  echo $db_scripts
}

function setup_mycnf() {
  cat <<EOT > setup_mycnf
[client]
user=root
password="$(echo "$1" | sed 's/"/\\"/g')"
EOT
}

function upgrade_database() {
  mariadb_args="--defaults-file=`pwd`/setup_mycnf --socket=/var/lib/mysql/mysql.sock"
  if ! test_db_connection_no_creds; then
    echo "NOTE: The root password you must enter is the one of the server of which you're reimporting the data, not this server's MariaDB root password"
    echo -n "Please enter the root password for MariaDB:"
    read -s mariadb_root_pass
    echo
    setup_mycnf $mariadb_root_pass
  else
    touch `pwd`/setup_mycnf
  fi

  db_name="$1"
  db_version=`mysql ${mariadb_args} $db_name -e "select version from pf_version order by id desc limit 1;" | egrep -o '^[0-9]+\.[0-9]+'`
  echo "Database $db_name runs version $db_version"
  if [ -z "$db_version" ]; then
    echo "Unable to find DB version"
    exit 1
  fi
  scripts=`get_db_upgrade_scripts $db_version`
  echo "Found upgrade path: $scripts"
  for script in $scripts; do
    sub_splitter
    echo "Running $script"
    mysql ${mariadb_args} -v $db_name < $script
    check_code $?
  done

  sub_splitter
  echo "Deleting content of keyed table"
  mysql ${mariadb_args} $db_name -e 'truncate keyed'
  check_code $?
}

function install_mariabackup() {
    local pf_version=$1
    sub_splitter
    if [ "$pf_version" = "10.3.0" ]; then
	echo "Installing old MariaDB-backup to import database dump"
	install_old_mariabackup
    else
	echo "Installing current MariaDB-backup to import database dump"
	install_current_mariabackup
    fi
}

function install_old_mariabackup() {
    if is_deb_based; then
	temp_dir=$(mktemp -d)
	wget -O $temp_dir/mariadb-backup-10.2_10.2.37.deb \
	     https://www.packetfence.org/downloads/PacketFence/debian-lastrelease/pool/stretch/m/mariadb-10.2/mariadb-backup-10.2_10.2.37+maria~stretch_amd64.deb
	dpkg-deb -xv $temp_dir/mariadb-backup-10.2_10.2.37.deb $temp_dir/mariadb-backup
	mv -f $temp_dir/mariadb-backup/usr/bin/mariabackup /usr/local/bin/mariabackup
	mv -f $temp_dir/mariadb-backup/usr/bin/mbstream /usr/local/bin/mbstream
    else
	yum remove -q -y MariaDB-backup
	yum localinstall -q -y https://www.packetfence.org/downloads/PacketFence/CentOS7/x86_64/RPMS/MariaDB-backup-10.2.37-1.el7.centos.x86_64.rpm
    fi
}

function install_current_mariabackup() {
    if is_deb_based; then
	apt update && apt install -q -y mariadb-backup
    else
	yum clean all -q --enablerepo=packetfence
	yum install -q -y MariaDB-backup --enablerepo=packetfence
  fi
}

function uninstall_mariabackup() {
    local pf_version=$1
    sub_splitter
    if [ "$pf_version" = "10.3.0" ]; then
	echo "Uninstalling old MariaDB-backup"
	uninstall_old_mariabackup
    else
	echo "Uninstalling current MariaDB-backup"
	uninstall_current_mariabackup
    fi
}

# yum and apt will not exit with an error code greater than 0
# if package to removed is not installed
function uninstall_old_mariabackup() {
    if is_deb_based; then
	rm -f /usr/local/bin/mariabackup
	rm -f /usr/local/bin/mbstream
    else
	yum remove -q -y MariaDB-backup
    fi
}

function uninstall_current_mariabackup() {
    if is_deb_based; then
	apt remove -q -y mariadb-backup
    else
	yum remove -q -y MariaDB-backup
  fi
}
