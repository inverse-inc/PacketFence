# Copyright (C) Inverse inc.
# Radius filter configuration
#
# you are able to rewrite the radius answer based on attributes values, by default the radius filter
# answer will be merge with the original radius answer. (to overwrite it add merge_answer = no).
# Also by default the status of the answer will be RLM_MODULE_OK but this status can be overwritten by
# the status attribute.
# The status attribute can have the following values (See http://wiki.freeradius.org/modules/Rlm_perl for more details):
# RLM_MODULE_REJECT
# RLM_MODULE_FAIL
# RLM_MODULE_OK
# RLM_MODULE_HANDLED
# RLM_MODULE_INVALID
# RLM_MODULE_USERLOCK
# RLM_MODULE_NOTFOUND
# RLM_MODULE_NOOP
# RLM_MODULE_UPDATED
# RLM_MODULE_NUMCODES
#
# you can use scopes in the radius filter:
# returnRadiusAccessAccept is when you return the answer for a device access
# returnAuthorizeRead is when you return the answer for the switch read login access
# returnAuthorizeWrite is when you return the answer for the switch write login access
# returnAuthorizeVoip  is when you return the answer for a VoIP
#
# Specific scopes just to use radius filter to change the logic of Freeradius on the fly
#
# packetfence.authorize call the RADIUS filter in the packetfence authorize section
# packetfence.authenticate call the RADIUS filter in the packetfence authenticate section
# packetfence.pre-proxy call the RADIUS filter in the packetfence pre-proxy section
# packetfence.post-proxy call the RADIUS filter in the packetfence post-proxy section
# packetfence-tunnel.authorize call the RADIUS filter in the packetfence-tunnel authorize section
# packetfence.preacct call the RADIUS filter in the packetfence preacct section
# packetfence.accounting call the RADIUS filter in the packetfence accounting section
# eduroam.authorize call the RADIUS filter in the eduroam accounting section
# eduroam.pre-proxy  call the RADIUS filter in the pre-proxy accounting section
# eduroam.post-proxy call the RADIUS filter in the post-proxy accounting section
# eduroam.preacct call the RADIUS filter in the eduroam preacct section
#
#This rule will return the VLAN ID id 42 for this specific MAC address
#
#[SpecificVlanForMac]
#answer.1=reply:Tunnel-Type = VLAN
#status=enabled
#answer.0=reply:Tunnel-Medium-Type = IEEE-802
#description=Set the vlan ID 42 for a specific MAC
#scopes=returnRadiusAccessAccept
#radius_status=RLM_MODULE_OK
#merge_answer=no
#answer.2=reply:Tunnel-Private-Group-Id = 42
#condition=connection_type == "Ethernet-NoEAP" && mac == "00:11:22:33:44:55"
#
#
# Advanced rule:
#
# This rule will return the vlan id associated to the user role and Cisco-AVPair where the attributes
# has been evaluated.
# merge_answer mean to not merge the original answer with radius filter answer.
#[SpecificVlanForMac]
#answer.1=reply:Tunnel-Type = VLAN
#status=enabled
#answer.0=reply:Tunnel-Medium-Type = IEEE-802
#description=Set the vlan ID 42 for a specific MAC
#scopes=returnRadiusAccessAccept
#radius_status=RLM_MODULE_OK
#merge_answer=no
#answer.2=reply:Tunnel-Private-Group-Id = $vlan
#answer.3=reply:Cisco-AVPair = url-redirect-acl=$user_role;url-redirect=${switch._portalURL}/cep$session_id
#condition=connection_type == "Ethernet-NoEAP" && mac == "00:11:22:33:44:55"

#
# All the answer in the rule is computed by PacketFence so you can set static and dynamic values
# Let say you defined this answer and the $user_role value is set to default:
#
#answer.0=reply:Tunnel-Medium-Type = IEEE-802
#answer.1 = Tunnel-Type = VLAN
#answer.2 = Tunnel-Private-Group-ID = ${switch._vlans.$user_role}
#answer.3 = Cisco-AVPair => url-redirect-acl=$user_role;url-redirect=${switch._portalURL}/cep$session_id
#
# PacketFence will first evaluate simple variables like $user_role to default then it will evaluate
# ${switch._vlans.default} to 1 (see switch hash above).
#
#'node_info => {
#        'autoreg' => 'no',
#        ....
#},
#'switch' => {
#    '_vlans' => {
#        'inline' => '6',
#        'isolation' => '2',
#        'normal' => '1',
#        'default' => '1',
#        'registration' => '3',
#        'voice' => '5',
#        'macDetection' => '4',
#    },
#    '_portalURL' => 'http://192.168.1.2',
#    ....
#},
#'wasInline' => 0,
#...
#
# Then PacketFence will evaluate the answer.3 to Cisco-AVPair = url-redirect-acl=default;url-redirect=http://192.168.1.2/cepab23bc
#
# You can also define a range of int values and it will return a random number in this range:
#
# answer.5=reply:Session-Timeout = 200..300,500..700
#
# will return a radius attribute Session-Timeout with a value between 200 and 300 or between 500 and 700
#
#### authorize example ####
#
# There is some cases where you want to override the radius flow, like changing the value of Proxy-To-Realm to force the request to be sent to a specific Realm bases on the username.
#
#[ForceProxy]
#status=enabled
#answer.0=control:Proxy-To-Realm = ACME
#top_op=and
#description=Force proxy for a specific user
#scopes=packetfence.authorize
#merge_answer=yes
#condition=radius_request.username =~ "^bobacme.*"
#
#### preacct example ####
#
# There is some cases where you want to override the radius flow, like changing the value of Proxy-To-Realm to force the request to be sent to a specific Realm bases on the username (for accounting).
#
#[ForceProxyAcct]
#status=enabled
#answer.0=control:Proxy-To-Realm = ACME
#top_op=and
#description=Force proxy for a specific user
#scopes=packetfence.preacct
#merge_answer=yes
#condition=radius_request.username =~ "^bobacme.*"
#
#### pre-proxy example ####
#
# There is some cases where you want to modify the radius request before sending it to a remote radius server.
# In this example we will rewrite the username based on the NAS-Identifier value.
#
#[ForceProxyAcct]
#status=enabled
#answer.0=proxy-request:User-Name = Building1!${radius_request.User-Name}
#top_op=and
#description=Force proxy for a specific user
#scopes=packetfence.pre-proxy
#merge_answer=yes
#condition=radius_request.NAS-Identifier == "Building1"

#
#### post-proxy example ####
#
# In this example we will add the vlan 33 for all the answers of the remote radius server
#
#[ForcePostProxy]
#status=enabled
#top_op=and
#description=Force the vlan id to 33 on post-proxy
#scopes=packetfence.post-proxy
#merge_answer=no
#answer.0=reply:Tunnel-Medium-Type = IEEE-802
#answer.2=reply:Tunnel-Private-Group-Id = 33
#answer.1=reply:Tunnel-Type = VLAN
#condition=mac =~ "*"
#
#
# filter can be for the scope returnRadiusAccessAccept:
#     node_info.autoreg
#     node_info.status
#     node_info.bypass_vlan
#     node_info.bandwidth_balance
#     node_info.regdate
#     node_info.bypass_role
#     node_info.device_class
#     node_info.device_type
#     node_info.device_version
#     node_info.device_score
#     node_info.pid
#     node_info.machine_account
#     node_info.category
#     node_info.mac
#     node_info.last_arp
#     node_info.last_dhcp
#     node_info.user_agent
#     node_info.computername
#     node_info.dhcp_fingerprint
#     node_info.detect_date
#     node_info.voip
#     node_info.notes
#     node_info.time_balance
#     node_info.sessionid
#     node_info.dhcp_vendor
#     node_info.unregdate
#     fingerbank_info.device_fq
#     fingerbank_info.device_hierarchy_names
#     fingerbank_info.device_hierarchy_ids
#     fingerbank_info.score
#     fingerbank_info.version
#     fingerbank_info.mobile
#     switch._switchIp
#     switch._ip
#     switch._portalURL
#     switch._switchMac
#     switch._ip
#     ifIndex
#     mac
#     connection_type
#     username
#     ssid
#     vlan
#     wasInline
#     user_role
#     radius_request
#     security_event
#     time
#
# filter can be for the scopes returnAuthorizeRead and returnAuthorizeWrite
#     switch._switchIp
#     switch._ip
#     switch._portalURL
#     switch._switchMac
#     switch._ip
#     realm
#     user_name
#     stripped_user_name
#     radius_request
#     source_ip
#
# operator can be:
#     is
#     is_not
#     match
#     match_not
#     defined
#     date_is_before
#     date_is_after
#
# attribute can be:
#
# - for connection_type
#    Wireless-802.11-EAP
#    Wireless-802.11-NoEAP
#    Ethernet-EAP
#    Ethernet-NoEAP
#    SNMP-Traps
#    Inline
#    Ethernet-NoEAP
#
#
# - for the radius_request
#    All the attributes you can have in the RADIUS request (run FreeRADIUS in debug mode to see these attributes)
#
#
# The value of a time is specific and follow this logic:
# http://search.cpan.org/~pryan/Period-1.20/Period.pm
# For example, if you want to test the current date for Monday to Friday, 9am to 11am and for 2pm to 4pm:
# condition=time_period(time, "wd {Mon Tue Wed Thu Fri} hr {9am-11am}, wd {Mon Tue Wed Thu Fri} hr {2pm-4am}")

