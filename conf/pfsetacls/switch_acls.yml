- name: "Push ACLs on network equipments"
  hosts: switches
  gather_facts: no

  tasks:

    - name: Parse the IOS acls configuration file
      cisco.ios.ios_acls:
        running_config: "{{ lookup('file', acl_config ) }}"
        state: parsed
      register: acls
      when: ansible_network_os == 'cisco.ios.ios'

    - name: Load new acl into Cisco Switch
      cisco.ios.ios_acls:
        config: "{{ acls.parsed }}"[% IF delete >= 1 %]
        state: deleted[% ELSE %]
        state: replaced[% END %]
      when: ansible_network_os == 'cisco.ios.ios'

    - name: Load new acl into Cisco WLC
      community.network.aireos_config:
        src: "{{ acl_config }}"
      when: ansible_network_os == 'aireos'

    - name: Load new acl into Cisco WLC 2nd pass
      community.network.aireos_config:
        src: "{{ acl_config }}"
      when: ansible_network_os == 'aireos'

    - name: Load new acl in Aruba-CX
      arubanetworks.aoscx.aoscx_config:
        src: "{{ acl_config }}"
      when: ansible_network_os == 'arubanetworks.aoscx.aoscx'

[% FOREACH role IN interfaces_delete.keys %]
[% FOREACH interface IN interfaces_delete.$role %]
    - name: remove acl on interface
      cisco.ios.ios_config:
        lines:
          - no ip access-group [% role %] in
        parents: "{{ item }}"
      with_items:
       - interface [% interface %]
[% END %]
[% END %]

[% IF delete == 0 %]
[% FOREACH role IN interfaces.keys %]
[% FOREACH interface IN interfaces.$role %]
    - name: Merge module attributes of given access-groups
      cisco.ios.ios_acl_interfaces:
        config:
          - name: [% interface %]
            access_groups:
              - afi: ipv4
                acls:
                  - name: [% role %]
                    direction: in[% IF delete >= 1 %]
        state: deleted[% ELSE %]
        state: merged[% END %]
      when: ansible_network_os == 'cisco.ios.ios'
[% END %]
[% END %]
[% END %]

    - name: Load new acl into Meraki
      cisco.meraki.networks_switch_access_control_lists:
        meraki_api_key: "{{meraki_api_key}}"
        meraki_base_url: "{{meraki_base_url}}"
        meraki_single_request_timeout: "{{meraki_single_request_timeout}}"
        meraki_certificate_path: "{{meraki_certificate_path}}"
        meraki_requests_proxy: "{{meraki_requests_proxy}}"
        meraki_wait_on_rate_limit: "{{meraki_wait_on_rate_limit}}"
        meraki_nginx_429_retry_wait_time: "{{meraki_nginx_429_retry_wait_time}}"
        meraki_action_batch_retry_wait_time: "{{meraki_action_batch_retry_wait_time}}"
        meraki_retry_4xx_error: "{{meraki_retry_4xx_error}}"
        meraki_retry_4xx_error_wait_time: "{{meraki_retry_4xx_error_wait_time}}"
        meraki_maximum_retries: "{{meraki_maximum_retries}}"
        meraki_output_log: "{{meraki_output_log}}"
        meraki_log_file_prefix: "{{meraki_log_file_prefix}}"
        meraki_log_path: "{{meraki_log_path}}"
        meraki_print_console: "{{meraki_print_console}}"
        meraki_suppress_logging: "{{meraki_suppress_logging}}"
        meraki_simulate: "{{meraki_simulate}}"
        meraki_be_geo_id: "{{meraki_be_geo_id}}"
        meraki_use_iterator_for_get_pages: "{{meraki_use_iterator_for_get_pages}}"
        meraki_inherit_logging_config: "{{meraki_inherit_logging_config}}"
        state: present
        networkId: string
        rules:
        - comment: Deny SSH
          dstCidr: 172.16.30/24
          dstPort: '22'
          ipVersion: ipv4
          policy: deny
          protocol: tcp
          srcCidr: 10.1.10.0/24
          srcPort: any
          vlan: '10'
      when: ansible_network_os == 'cisco.meraki'
