# Copyright (C) Inverse inc.
[Accounting::Bandwidth]
type=sql
description=Total accounting bandwidth
columns=time_bucket,bytes_in,bytes_out,bytes_total
sql= <<EOT
  SELECT
    time_bucket,
    SUM(in_bytes) AS bytes_in,
    SUM(out_bytes) AS bytes_out,
    SUM(total_bytes) AS bytes_total
  FROM (
    SELECT
      time_bucket,
      in_bytes,
      out_bytes,
      total_bytes
    FROM bandwidth_accounting
    WHERE
      time_bucket >= ?
      AND time_bucket <= ?
    UNION ALL
    SELECT
      time_bucket,
      in_bytes,
      out_bytes,
      total_bytes
    FROM bandwidth_accounting_history
    WHERE
      time_bucket >= ?
      AND time_bucket <= ?
  ) `total`
  GROUP BY time_bucket
  ORDER BY time_bucket DESC
  LIMIT ?;
EOT
bindings=start_date,end_date,start_date,end_date,limit
has_date_range=enabled
has_limit=enabled
cursor_type=none
date_limit=24h
default_limit=100
charts=scatter|time_bucket:bytes_in:bytes_out:bytes_total

[Accounting::Node]
type=sql
description=Top node accounting bandwidth
columns=mac,bytes_in,bytes_out,bytes
sql= <<EOT
  SELECT * FROM (
    SELECT
      mac,
      SUM(in_bytes) AS bytes_in,
      SUM(out_bytes) AS bytes_out,
      SUM(total_bytes) AS bytes
    FROM (
      SELECT
        mac,
        in_bytes,
        out_bytes,
        total_bytes
      FROM bandwidth_accounting
      WHERE
        mac IS NOT NULL
        AND mac != '00:00:00:00:00:00'
        AND time_bucket >= ?
        AND time_bucket <= ?
      UNION ALL
      SELECT
        mac,
        in_bytes,
        out_bytes,
        total_bytes
      FROM bandwidth_accounting_history
      WHERE
        mac IS NOT NULL
        AND mac != '00:00:00:00:00:00'
        AND time_bucket >= ?
        AND time_bucket <= ?
    ) `total`
    GROUP BY mac
    ORDER BY bytes DESC, mac DESC
  ) as `x`
  WHERE
    bytes < ?
  LIMIT ?;
EOT
bindings=start_date,end_date,start_date,end_date,cursor,limit
has_date_range=enabled
has_limit=enabled
cursor_type=field
cursor_field=bytes
cursor_default=18446744073709551615
date_limit=24h
default_limit=25
node_fields=mac
charts=pie|mac:bytes,bar|mac:bytes

[Accounting::Operating System Class]
type=sql
description=Top Fingerbank operating system class accounting bandwidth
columns=device_class,bytes_in,bytes_out,bytes
sql= <<EOT
  SELECT * FROM (
    SELECT
      device_class,
      SUM(in_bytes) AS bytes_in,
      SUM(out_bytes) AS bytes_out,
      SUM(in_bytes) + SUM(out_bytes) AS bytes
    FROM (
      SELECT
        mac,
        in_bytes,
        out_bytes
      FROM bandwidth_accounting
      WHERE
        time_bucket >= ?
        AND time_bucket <= ?
      UNION ALL
      SELECT
        mac,
        in_bytes,
        out_bytes
      FROM bandwidth_accounting_history
      WHERE
        time_bucket >= ?
        AND time_bucket <= ?
    ) `total`
    LEFT JOIN node USING (mac)
    WHERE
      device_class IS NOT NULL
    GROUP BY device_class
    ORDER BY bytes DESC
  ) as `x`
  WHERE
    bytes < ?
  LIMIT ?;
EOT
bindings=start_date,end_date,start_date,end_date,cursor,limit
has_date_range=enabled
has_limit=enabled
cursor_type=field
cursor_field=bytes
cursor_default=18446744073709551615
date_limit=24h
default_limit=25
charts=pie|device_class:bytes,bar|device_class:bytes

[Accounting::User]
type=sql
description=Top user accounting bandwidth
columns=pid,bytes_in,bytes_out,bytes
sql= <<EOT
  SELECT * FROM (
    SELECT
      pid,
      SUM(in_bytes) AS bytes_in,
      SUM(out_bytes) AS bytes_out,
      SUM(in_bytes) + SUM(out_bytes) AS bytes
    FROM (
      SELECT
        mac,
        in_bytes,
        out_bytes
      FROM bandwidth_accounting
      WHERE
        time_bucket >= ?
        AND time_bucket <= ?
      UNION ALL
      SELECT
        mac,
        in_bytes,
        out_bytes
      FROM bandwidth_accounting_history
      WHERE
        time_bucket >= ?
        AND time_bucket <= ?
    ) `total`
    LEFT JOIN node USING (mac)
    WHERE
      pid IS NOT NULL
    GROUP BY pid
    ORDER BY bytes DESC, pid DESC
  ) as `x`
  WHERE
    bytes < ?
  LIMIT ?;
EOT
bindings=start_date,end_date,start_date,end_date,cursor,limit
has_date_range=enabled
has_limit=enabled
cursor_type=field
cursor_field=bytes
cursor_default=18446744073709551615
date_limit=24h
default_limit=25
person_fields=pid
charts=pie|pid:bytes,bar|pid:bytes

[Authentication::All]
type=abstract
description=All the authentications (portal) that have occured on the server.
# The table to search from
base_table=auth_log
# The columns to select
columns=auth_log.process_name as "Process Name", auth_log.mac "MAC Address", auth_log.pid as "Owner", auth_log.status as "Status", auth_log.attempted_at as "Attempted at", auth_log.completed_at as "Completed at", auth_log.source as "Source", auth_log.profile as "Connection Profile"
searches=string:Process Name:auth_log.process_name,string:MAC Address:auth_log.mac,string:Owner:auth_log.pid,string:Status:auth_log.status,string:Source:auth_log.source
date_field=attempted_at
base_conditions_operator=any
person_fields=Owner
node_fields=MAC Address
order_fields=-auth_log.attempted_at

[Authentication::All Failures]
type=abstract
description=All failed authentications (portal) that have occured on the server.
# The table to search from
base_table=auth_log
# The columns to select
columns=auth_log.process_name as "Process Name", auth_log.mac "MAC Address", auth_log.pid as "Owner", auth_log.attempted_at as "Attempted at", auth_log.completed_at as "Completed at", auth_log.source as "Source", auth_log.profile as "Connection Profile"
date_field=attempted_at
base_conditions_operator=any
person_fields=Owner
node_fields=MAC Address
order_fields=-auth_log.attempted_at
base_conditions=auth_log.status:=:failed
charts=scatter|Attempted at

[Authentication::All Successes]
type=abstract
description=All successful authentications (portal) that have occured on the server.
# The table to search from
base_table=auth_log
# The columns to select
columns=auth_log.process_name as "Process Name", auth_log.mac "MAC Address", auth_log.pid as "Owner", auth_log.attempted_at as "Attempted at", auth_log.completed_at as "Completed at", auth_log.source as "Source", auth_log.profile as "Connection Profile"
date_field=attempted_at
base_conditions_operator=any
person_fields=Owner
node_fields=MAC Address
order_fields=-auth_log.attempted_at
base_conditions=auth_log.status:=:completed
charts=scatter|Attempted at

[Authentication::Top Failures::Connection Profile to Source]
type=sql
description=All failed authentications of sources vs profiles
columns=profile,source,count,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total FROM auth_log
     WHERE status='failed'
      AND completed_at >= ?
      AND completed_at <= ?
  )
  SELECT
    profile,
    source,
    COUNT(1) AS count,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM auth_log, total
  WHERE status='failed'
      AND completed_at >= ?
      AND completed_at <= ?
  GROUP BY profile, source
  ORDER BY percent DESC;
EOT
bindings=start_date,end_date,start_date,end_date
has_date_range=enabled
has_limit=disabled
cursor_type=none
charts=parallel|profile:source:count

[Authentication::Top Failures::By Connection Profile]
type=sql
description=All failed authentications by connection profile
columns=profile,count,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total FROM auth_log
     WHERE status='failed'
      AND completed_at BETWEEN ? AND ?
  )
  SELECT
    profile,
    COUNT(1) AS count,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM auth_log, total
  WHERE status='failed'
    AND completed_at BETWEEN ? AND ?
  GROUP BY profile
  ORDER BY percent DESC;
EOT
bindings=start_date,end_date,start_date,end_date
has_date_range=enabled
has_limit=disabled
cursor_type=none
charts=pie|profile:count,bar|profile:count

[Authentication::Top Failures::By Source]
type=sql
description=All failed authentications by source
columns=source,count,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total FROM auth_log
     WHERE status='failed'
      AND completed_at BETWEEN ? AND ?
  )
  SELECT
    source,
    COUNT(1) AS count,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM auth_log, total
  WHERE status='failed'
    AND completed_at BETWEEN ? AND ?
  GROUP BY source
  ORDER BY percent DESC;
EOT
bindings=start_date,end_date,start_date,end_date
has_date_range=enabled
has_limit=disabled
cursor_type=none
charts=pie|source:count,bar|source:count

[Authentication::Top Successes::By Connection Profile]
type=sql
description=All successful authentications by connection profile
columns=profile,count,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total FROM auth_log
     WHERE status='completed'
      AND completed_at >= ?
      AND completed_at <= ?
  )
  SELECT
    profile,
    COUNT(1) AS count,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM auth_log, total
  WHERE status='completed'
      AND completed_at >= ?
      AND completed_at <= ?
  GROUP BY profile
  ORDER BY percent DESC;
EOT
bindings=start_date,end_date,start_date,end_date
has_date_range=enabled
has_limit=disabled
cursor_type=none
charts=pie|profile:count,bar|profile:count

[Authentication::Top Successes::By Source]
type=sql
description=All successful authentications by source
columns=source,count,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total FROM auth_log
     WHERE status='completed'
      AND completed_at >= ?
      AND completed_at <= ?
  )
  SELECT
    source,
    COUNT(1) AS count,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM auth_log, total
  WHERE status='completed'
      AND completed_at >= ?
      AND completed_at <= ?
  GROUP BY source
  ORDER BY percent DESC;
EOT
bindings=start_date,end_date,start_date,end_date
has_date_range=enabled
has_limit=disabled
cursor_type=none
charts=pie|source:count,bar|source:count

[Authentication::Top Successes::Connection Profile to Source]
type=sql
description=All successful authentications of sources vs profiles
columns=profile,source,count,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total FROM auth_log
     WHERE status='completed'
      AND completed_at >= ?
      AND completed_at <= ?
  )
  SELECT
    profile,
    source,
    COUNT(1) AS count,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM auth_log, total
  WHERE status='completed'
      AND completed_at >= ?
      AND completed_at <= ?
  GROUP BY profile, source
  ORDER BY percent DESC;
EOT
bindings=start_date,end_date,start_date,end_date
has_date_range=enabled
has_limit=disabled
cursor_type=none
charts=parallel|profile:source:count

[Connection Types::Active]
type=sql
description=All active connection types
columns=connection_type,connections,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total
    FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac)
    WHERE
      (ip4log.end_time = 0 OR ip4log.end_time > NOW())
  )
  SELECT
    connection_type,
    COUNT(1) AS connections,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac),
    total
  WHERE
    (ip4log.end_time = 0 OR ip4log.end_time > NOW())
  GROUP BY connection_type
  ORDER BY percent DESC;
EOT
has_limit=disabled
cursor_type=none
charts=pie|connection_type:connections,bar|connection_type:connections

[Connection Types::All]
type=sql
description=All connection types
columns=connection_type,connections,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total FROM locationlog
    INNER JOIN node USING(mac)
  )
  SELECT
    connection_type,
    COUNT(1) AS connections,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM locationlog
  INNER JOIN node USING(mac),
  total
  GROUP BY connection_type
  ORDER BY percent DESC;
EOT
has_limit=disabled
cursor_type=none
charts=pie|connection_type:connections,bar|connection_type:connections

[Connection Types::Date Range]
type=sql
description=Connection types by date range
columns=connection_type,connection_type_orig,connections,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(DISTINCT mac) as total
    FROM locationlog
    WHERE
      start_time BETWEEN ? AND ?
  )
  SELECT
    connection_type,
    connection_type AS connection_type_orig,
    COUNT(DISTINCT mac) AS connections,
    ROUND(COUNT(DISTINCT mac) / total.total * 100, 1) AS percent
  FROM locationlog, total
  WHERE
    start_time BETWEEN ? AND ?
  GROUP BY connection_type
  ORDER BY percent DESC;
EOT
bindings=start_date,end_date,start_date,end_date
has_date_range=enabled
has_limit=disabled
cursor_type=none
charts=pie|connection_type:connections,bar|connection_type:connections

[Connection Types::Registered Active]
type=sql
description=All active registered connection types
columns=connection_type,connections,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total
    FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac)
    WHERE
      node.status = "reg"
      AND (ip4log.end_time = 0 OR ip4log.end_time > NOW())
  )
  SELECT
    connection_type,
    COUNT(1) AS connections,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac),
    total
  WHERE
    node.status = "reg"
    AND (ip4log.end_time = 0 OR ip4log.end_time > NOW())
  GROUP BY connection_type
  ORDER BY percent DESC;
EOT

has_limit=disabled
cursor_type=none
charts=pie|connection_type:connections,bar|connection_type:connections

[Connection Types::Registered All]
type=sql
description=All registered connection types
columns=connection_type,connections,percent
sql= <<EOT
   WITH total AS (
    SELECT
      COUNT(1) as total
    FROM locationlog
    INNER JOIN node USING(mac)
    WHERE
      node.status = "reg"
  )
  SELECT
    connection_type,
    COUNT(1) AS connections,
    ROUND( COUNT(1) / total.total * 100, 1) AS percent
  FROM locationlog
  INNER JOIN node USING(mac),
  total
  WHERE
    node.status = "reg"
  GROUP BY connection_type
  ORDER BY percent DESC;
EOT

has_limit=disabled
cursor_type=none
charts=pie|connection_type:connections,bar|connection_type:connections

[Fingerbank::Unknown Fingerprints::Active]
type=sql
description=All active unknown Fingerbank fingerprints
columns=mac,dhcp_fingerprint,computername,user_agent,vendor
sql= <<EOT
  SELECT
    node.mac,
    node.mac as vendor,
    dhcp_fingerprint,
    computername,
    user_agent
  FROM node, ip4log
  WHERE
    device_type IS NULL
    AND dhcp_fingerprint != 0
    AND dhcp_fingerprint >= ?
    AND ip4log.mac = node.mac
    AND (ip4log.end_time = 0 OR ip4log.end_time > NOW())
  ORDER BY mac
  LIMIT ?;
EOT
bindings=cursor,limit
has_limit=enabled
cursor_type=field
cursor_field=dhcp_fingerprint
cursor_default=0
formatting=vendor:oui_to_vendor
node_fields=mac

[Fingerbank::Unknown Fingerprints::All]
type=sql
description=All unknown Fingerbank fingerprints
columns=mac,dhcp_fingerprint,computername,user_agent,vendor
sql= <<EOT
  SELECT
    mac,
    node.mac as vendor,
    dhcp_fingerprint,
    computername,
    user_agent
  FROM node
  WHERE
    device_type IS NULL
    AND dhcp_fingerprint != 0
    AND dhcp_fingerprint >= ?
  ORDER BY dhcp_fingerprint
  LIMIT ?;
EOT
bindings=cursor,limit
has_limit=enabled
cursor_type=field
cursor_field=dhcp_fingerprint
cursor_default=0
node_fields=mac
formatting=vendor:oui_to_vendor

[Ip4Log::Archive]
type=abstract
description=IP address archive of the devices on your network when enabled (see Maintenance section)
# The table to search from
base_table=ip4log_archive
# The columns to select
columns=ip4log_archive.mac "MAC Address", ip4log_archive.ip as "IP", ip4log_archive.start_time as "Start time", ip4log_archive.end_time as "End time"
searches=string:MAC Address:ip4log_archive.mac,string:IP:ip4log_archive.ip
date_field=start_time
# Display only the sponsor registration
#base_conditions=activation.type:=:sponsor
base_conditions_operator=all
node_fields=MAC Address
charts=scatter@Ip4Log Start Time|Start time,scatter@Ip4Log End Time|End time

[Ip4Log::History]
type=abstract
description=IP address history of the devices on the network (1 week is kept by default)
# The table to search from
base_table=ip4log_history
# The columns to select
columns=ip4log_history.mac "MAC Address", ip4log_history.ip as "IP", ip4log_history.start_time as "Start time", ip4log_history.end_time as "End time"
searches=string:MAC Address:ip4log_history.mac,string:IP:ip4log_history.ip
date_field=start_time
# Display only the sponsor registration
#base_conditions=activation.type:=:sponsor
base_conditions_operator=all
node_fields=MAC Address
order_fields=-ip4log_history.start_time
charts=scatter@Ip4Log Start Time|Start time,scatter@Ip4Log End Time|End time

[Node::Active]
type=sql
description=All active nodes
columns=mac, ip, start_time, pid, detect_date, regdate, lastskip, status, user_agent, computername, notes, last_arp, last_dhcp, os
sql= <<EOT
  SELECT
    n.mac as mac,
    ip,
    start_time,
    pid,
    detect_date,
    regdate,
    lastskip,
    status,
    user_agent,
    computername,
    notes,
    last_arp,
    last_dhcp,
    device_type AS os
  FROM node n
  LEFT JOIN ip4log i USING (mac)
  WHERE
   (i.end_time = 0 OR i.end_time > NOW()) AND
    n.mac >= ?
  ORDER BY n.mac
  LIMIT ?;
EOT
bindings=cursor,limit
cursor_type=field
cursor_field=mac
cursor_default=00:00:00:00:00:00
default_limit=100
node_fields=mac
person_fields=pid
charts=scatter|regdate

[Node::Inactive]
type=sql
description=All inactive nodes
columns=mac, ip, start_time, pid, detect_date, regdate, lastskip, status, user_agent, computername, notes, last_arp, last_dhcp, os
sql= <<EOT
  SELECT
    mac,
    pid,
    detect_date,
    regdate,
    lastskip,
    status,
    user_agent,
    computername,
    notes,
    last_arp,
    last_dhcp,
    device_type AS os
  FROM node n
  LEFT JOIN ip4log i USING (mac)
  WHERE
      (
        (end_time != 0 AND end_time <= NOW()) OR
        i.ip IS NULL
      ) AND
      n.mac >= ?
  ORDER BY n.mac
  LIMIT ?;
EOT
bindings=cursor,limit
cursor_type=field
cursor_field=mac
cursor_default=00:00:00:00:00:00
default_limit=100
node_fields=mac
person_fields=pid

[Node::Registered::Active]
type=sql
description=All registered active nodes
columns=mac,pid,detect_date,regdate,lastskip,status,user_agent,computername,notes,last_arp,last_dhcp,os
sql= <<EOT
SELECT
        n.mac,
        pid,
        detect_date,
        regdate,
        lastskip,
        status,
        user_agent,
        computername,
        notes,
        last_arp,
        last_dhcp,
        device_type AS os
      FROM node n LEFT JOIN ip4log i USING (mac)
      WHERE
        n.status = 'reg'
        AND (i.end_time = 0 or i.end_time > NOW())
        AND mac >= ?
      ORDER BY mac
      LIMIT ?
EOT
bindings=cursor,limit
has_limit=enabled
cursor_type=field
cursor_field=mac
cursor_default=00:00:00:00:00:00
default_limit=100
node_fields=mac
person_fields=pid

[Node::Registered::All]
type=sql
description=All registered nodes
columns=mac,pid,detect_date,regdate,lastskip,status,user_agent,computername,notes,last_arp,last_dhcp,os
sql= <<EOT
SELECT
        mac,
        pid,
        detect_date,
        regdate,
        lastskip,
        status,
        user_agent,
        computername,
        notes,
        last_arp,
        last_dhcp,
        device_type AS os
      FROM node
      WHERE
        status='reg'
        AND mac >= ?
      ORDER BY mac
      LIMIT ?
EOT
bindings=cursor,limit
has_limit=enabled
cursor_type=field
cursor_field=mac
cursor_default=00:00:00:00:00:00
default_limit=100
node_fields=mac
person_fields=pid

[Node::Unregistered::Active]
type=sql
description=All active unregistered nodes
columns=mac, ip, start_time, pid, detect_date, regdate, lastskip, status, user_agent, computername, notes, last_arp, last_dhcp, os
sql= <<EOT
  SELECT
    n.mac,
    pid,
    detect_date,
    regdate,
    lastskip,
    status,
    user_agent,
    computername,
    notes,
    last_arp,
    last_dhcp,
    device_type AS os
  FROM node n
  LEFT JOIN ip4log i USING( mac)
  WHERE
    n.status = 'unreg'
    AND (i.end_time = 0 OR i.end_time > NOW())
    AND mac >= ?
  ORDER BY mac
  LIMIT ?;
EOT
bindings=cursor,limit
cursor_type=field
cursor_field=mac
cursor_default=00:00:00:00:00:00
default_limit=100
node_fields=mac
person_fields=pid

[Node::Unregistered::All]
type=sql
description=All unregistered nodes
columns=mac, ip, start_time, pid, detect_date, regdate, lastskip, status, user_agent, computername, notes, last_arp, last_dhcp, os
sql= <<EOT
  SELECT
    mac,
    pid,
    detect_date,
    regdate,
    lastskip,
    status,
    user_agent,
    computername,
    notes,
    last_arp,
    last_dhcp,
    device_type AS os
  FROM node
  WHERE
    status = 'unreg'
    AND mac >= ?
  ORDER BY mac
  LIMIT ?;
EOT
bindings=cursor,limit
cursor_type=field
cursor_field=mac
cursor_default=00:00:00:00:00:00
default_limit=100
node_fields=mac
person_fields=pid

[Operating System Class::Active]
type=sql
description=Top active operating system classes
columns=description,count,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total
    FROM node, ip4log
    WHERE
      ip4log.mac = node.mac
      AND (ip4log.end_time = 0 OR ip4log.end_time > NOW())
  )
  SELECT
    IFNULL(device_class, 'Probable Static IP(s)') AS description,
    COUNT(1) AS count,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM (node n, ip4log i, total)
  WHERE
    i.mac = n.mac
    AND (i.end_time = 0 OR i.end_time > NOW())
  GROUP BY description
  ORDER BY percent DESC;
EOT
has_limit=disabled
cursor_type=none
charts=pie|description:count,bar|description:count

[Operating System Class::All]
type=sql
description=Top operating system classes
columns=description,count,percent
sql= <<EOT
  WITH total AS (
    SELECT COUNT(1) as total FROM node
  )
  SELECT
    IFNULL(device_class, 'Probable Static IP(s)') AS description,
    COUNT(1) AS count,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM node n, total
  GROUP BY description
  ORDER BY percent DESC;
EOT

has_limit=disabled
cursor_type=none
charts=pie|description:count,bar|description:count

[Operating Systems::Active]
type=sql
description=Top active operating systems
columns=description,dhcp_fingerprint,count,percent
sql= <<EOT
  WITH total AS (
    SELECT COUNT(1) as total FROM node
  )
  SELECT
    IFNULL(device_class, 'Probable Static IP(s)') AS description,
    n.dhcp_fingerprint,
    COUNT(1) AS count,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM (node n, ip4log i, total)
  WHERE n.mac = i.mac
    AND (i.end_time = 0 OR i.end_time > NOW())
  GROUP BY description
  ORDER BY percent desc;
EOT

has_limit=disabled
cursor_type=none
charts=pie|description:count,bar|description:count

[Operating Systems::All]
type=sql
description=Top operating systems
columns=description,dhcp_fingerprint,count,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total
    FROM (node n, ip4log i)
  WHERE n.mac = i.mac
    AND i.start_time BETWEEN ? AND ?
  )
  SELECT
    IFNULL(device_class, 'Probable Static IP(s)') AS description,
    n.dhcp_fingerprint,
    COUNT(DISTINCT n.mac) AS count,
    ROUND(COUNT(DISTINCT n.mac) / total.total * 100, 1) AS percent
  FROM (node n, ip4log i, total)
  WHERE n.mac = i.mac
    AND i.start_time BETWEEN ? AND ?
  GROUP BY description
  ORDER BY percent desc;
EOT
bindings=start_date,end_date,start_date,end_date
has_date_range=enabled
has_limit=disabled
cursor_type=none
charts=pie|description:count,bar|description:count

[RADIUS Authentication::Top Failures::By MAC]
type=sql
description=Top authentication failures by MAC
columns=mac,count,percent
sql= <<EOT
  SELECT
    `mac`,
    COUNT(1) AS `count`,
    SUM(100) / `total` AS `percent`
  FROM `radius_audit_log`
  CROSS JOIN (
    SELECT
      COUNT(1) AS `total`
    FROM `radius_audit_log`
    WHERE
      `auth_status` = 'Reject'
      AND `created_at` BETWEEN ? AND ?
  ) `x`
  WHERE
    `auth_status` = 'Reject'
    AND `created_at` BETWEEN ? AND ?
    AND `mac` IS NOT NULL
  GROUP BY 1
  ORDER BY `percent` DESC
  LIMIT ?;
EOT
bindings=start_date,end_date,start_date,end_date,limit
has_date_range=enabled
has_limit=enabled
cursor_type=none
charts=pie|mac:count,bar|mac:count
node_fields=mac

[RADIUS Authentication::Top Failures::By SSID]
type=sql
description=Top authentication failures by SSID
columns=ssid,count,percent
sql= <<EOT
  SELECT
    `ssid`,
    COUNT(1) AS `count`,
    SUM(100) / `total` AS `percent`
  FROM `radius_audit_log`
  CROSS JOIN (
    SELECT
      COUNT(1) AS `total`
    FROM `radius_audit_log`
    WHERE
      `auth_status` = 'Reject'
      AND `created_at` BETWEEN ? AND ?
  ) `x`
  WHERE
    `auth_status` = 'Reject'
    AND `created_at` BETWEEN ? AND ?
    AND `ssid` IS NOT NULL
  GROUP BY 1
  ORDER BY `percent` DESC
  LIMIT ?;
EOT
bindings=start_date,end_date,start_date,end_date,limit
has_date_range=enabled
has_limit=enabled
cursor_type=none
charts=pie|ssid:count,bar|ssid:count

[RADIUS Authentication::Top Failures::By Username]
type=sql
description=Top authentication failures by username
columns=user_name,count,percent
sql= <<EOT
  SELECT
    FREERADIUS_DECODE(`user_name`) AS `user_name`,
    COUNT(1) AS `count`,
    SUM(100) / `total` AS `percent`
  FROM `radius_audit_log`
  CROSS JOIN (
    SELECT
      COUNT(1) AS `total`
    FROM `radius_audit_log`
    WHERE
      `auth_status` = 'Reject'
      AND `created_at` BETWEEN ? AND ?
  ) `x`
  WHERE
    `auth_status` = 'Reject'
    AND `created_at` BETWEEN ? AND ?
    AND `user_name` IS NOT NULL
  GROUP BY 1
  ORDER BY `percent` DESC
  LIMIT ?;
EOT
bindings=start_date,end_date,start_date,end_date,limit
has_date_range=enabled
has_limit=enabled
cursor_type=none
charts=pie|username:count,bar|username:count

[RADIUS Authentication::Top Successes::By Computername]
type=sql
description=Top authentication successes by computername
columns=computer_name,count,percent
sql= <<EOT
  SELECT
    FREERADIUS_DECODE(`computer_name`) AS `computer_name`,
    COUNT(1) AS `count`,
    SUM(100) / `total` AS `percent`
  FROM `radius_audit_log`
  CROSS JOIN (
    SELECT
      COUNT(1) AS `total`
    FROM `radius_audit_log`
    WHERE
      `auth_status` = 'Accept'
      AND `created_at` BETWEEN ? AND ?
  ) `x`
  WHERE
    `auth_status` = 'Accept'
    AND `created_at` BETWEEN ? AND ?
    AND `computer_name` IS NOT NULL
  GROUP BY 1
  ORDER BY `percent` DESC
  LIMIT ?;
EOT
bindings=start_date,end_date,start_date,end_date,limit
has_date_range=enabled
has_limit=enabled
cursor_type=none
charts=pie|computer_name:count,bar|computer_name:count

[RADIUS Authentication::Top Successes::By MAC]
type=sql
description=Top authentication successes by MAC
columns=mac,count,percent
sql= <<EOT
  SELECT
    `mac`,
    COUNT(1) AS `count`,
    SUM(100) / `total` AS `percent`
  FROM `radius_audit_log`
  CROSS JOIN (
    SELECT
      COUNT(1) AS `total`
    FROM `radius_audit_log`
    WHERE
      `auth_status` = 'Accept'
      AND `created_at` BETWEEN ? AND ?
  ) `x`
  WHERE
    `auth_status` = 'Accept'
    AND `created_at` BETWEEN ? AND ?
    AND `mac` IS NOT NULL
  GROUP BY 1
  ORDER BY `percent` DESC
  LIMIT ?;
EOT
bindings=start_date,end_date,start_date,end_date,limit
has_date_range=enabled
has_limit=enabled
cursor_type=none
charts=pie|mac:count,bar|mac:count
node_fields=mac

[RADIUS Authentication::Top Successes::By SSID]
type=sql
description=Top authentication successes by SSID
columns=ssid,count,percent
sql= <<EOT
  SELECT
    `ssid`,
    COUNT(1) AS `count`,
    SUM(100) / `total` AS `percent`
  FROM `radius_audit_log`
  CROSS JOIN (
    SELECT
      COUNT(1) AS `total`
    FROM `radius_audit_log`
    WHERE
      `auth_status` = 'Accept'
      AND `created_at` BETWEEN ? AND ?
  ) `x`
  WHERE
    `auth_status` = 'Accept'
    AND `created_at` BETWEEN ? AND ?
    AND `ssid` IS NOT NULL
  GROUP BY 1
  ORDER BY `percent` DESC
  LIMIT ?;
EOT
bindings=start_date,end_date,start_date,end_date,limit
has_date_range=enabled
has_limit=enabled
cursor_type=none
charts=pie|ssid:count,bar|ssid:count

[RADIUS Authentication::Top Successes::By Username]
type=sql
description=Top authentication successes by username
columns=user_name,count,percent
sql= <<EOT
  SELECT
    FREERADIUS_DECODE(`user_name`) AS `user_name`,
    COUNT(1) AS `count`,
    SUM(100) / `total` AS `percent`
  FROM `radius_audit_log`
  CROSS JOIN (
    SELECT
      COUNT(1) AS `total`
    FROM `radius_audit_log`
    WHERE
      `auth_status` = 'Accept'
      AND `created_at` BETWEEN ? AND ?
  ) `x`
  WHERE
    `auth_status` = 'Accept'
    AND `created_at` BETWEEN ? AND ?
    AND `user_name` IS NOT NULL
  GROUP BY 1
  ORDER BY `percent` DESC
  LIMIT ?;
EOT
bindings=start_date,end_date,start_date,end_date,limit
has_date_range=enabled
has_limit=enabled
cursor_type=none
charts=pie|user_name:count,bar|username:count

[Roles::Active]
type=sql
description=Top roles of active registered nodes
columns=role,nodes,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total
    FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac)
    WHERE
      (ip4log.end_time = 0 OR ip4log.end_time > NOW())
      AND node.status = 'reg'
  )
  SELECT
    IFNULL(role, 'Unknown') AS role,
    COUNT(1) AS nodes,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac),
    total
    WHERE
      (ip4log.end_time = 0 OR ip4log.end_time > NOW())
      AND node.status = 'reg'
  GROUP BY role
  ORDER BY nodes DESC;
EOT
has_limit=disabled
cursor_type=none
charts=pie|role:nodes,bar|role:nodes
role_fields=role

[Roles::Active per device class]
type=sql
description=Active registered nodes of roles vs device class
columns=role,device_class,nodes,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) AS total
    FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac)
    WHERE
      (ip4log.end_time = 0 OR ip4log.end_time > NOW())
      AND node.status = 'reg'
  )
  SELECT
    IFNULL(role, 'Unknown') AS role,
    device_class,
    COUNT(1) AS nodes,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac),
    total
  WHERE
    (ip4log.end_time = 0 OR ip4log.end_time > NOW())
    AND node.status = 'reg'
  GROUP BY role, device_class
  ORDER BY percent DESC;
EOT
has_limit=disabled
cursor_type=none
charts=parallel|device_class:role:nodes
role_fields=role

[Roles::Active per device manufacturer]
type=sql
description=Active registered nodes of roles vs device manufacturers
columns=role,device_manufacturer,nodes,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) AS total
    FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac)
    WHERE
      (ip4log.end_time = 0 OR ip4log.end_time > NOW())
      AND node.status = 'reg'
  )
  SELECT
    IFNULL(role, 'Unknown') AS role,
    IFNULL(device_manufacturer, 'Unknown') as device_manufacturer,
    COUNT(1) AS nodes,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac),
    total
  WHERE
    (ip4log.end_time = 0 OR ip4log.end_time > NOW())
    AND node.status = 'reg'
  GROUP BY role, device_manufacturer
  ORDER BY percent DESC;
EOT
has_limit=disabled
cursor_type=none
charts=parallel|device_manufacturer:role:nodes
role_fields=role

[Roles::Active per device type]
type=sql
description=Active registered nodes of roles vs device types
columns=role,device_type,nodes,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) AS total
    FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac)
    WHERE
      (ip4log.end_time = 0 OR ip4log.end_time > NOW())
      AND node.status = 'reg'
  )
  SELECT
    IFNULL(role, 'Unknown') AS role,
    device_type,
    COUNT(1) AS nodes,
    ROUND(COUNT(1) / @TOTAL * 100, 1) AS percent
  FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac),
    total
  WHERE
    (ip4log.end_time = 0 OR ip4log.end_time > NOW())
    AND node.status = 'reg'
  GROUP BY role, device_type
  ORDER BY percent DESC;
EOT

has_limit=disabled
cursor_type=none
charts=parallel|device_type:role:nodes
role_fields=role

[Roles::All]
type=sql
description=Top roles of registered nodes
columns=role,nodes,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) AS total
    FROM locationlog
    INNER JOIN node USING(mac)
    WHERE
      node.status = 'reg'
  )
  SELECT
    IFNULL(role, 'Unknown') AS role,
    COUNT(1) AS nodes,
    ROUND(COUNT(1) / total.total * 100, 1) AS percent
  FROM locationlog
    INNER JOIN node USING(mac),
    total
  WHERE
    node.status = 'reg'
  GROUP BY role
  ORDER BY nodes DESC;
EOT
has_limit=disabled
cursor_type=none
charts=pie|role:nodes,bar|role:nodes
role_fields=role

[Security Events::Closed]
type=abstract
description=List of closed security events on the network
base_table=security_event
columns=security_event.release_date "Release date", class.description "Security Event Name", node.status "Node status", node.mac "MAC Address", node.computername "Computer Name", node.pid "Owner", node.device_class "Device Class", node_category.name "Role"
joins= <<EOT
=>{class.security_event_id=security_event.security_event_id} class|class
=>{security_event.mac=node.mac} node|node
=>{node_category.category_id=node.category_id} node_category|node_category
EOT
node_fields=MAC Address
person_fields=Owner
date_field=start_date
base_conditions=security_event.status:=:closed
charts=scatter|Release date

[Security Events::Open]
type=abstract
description=List of open security events on the network
base_table=security_event
columns=security_event.start_date "Event date", class.description "Security Event Name", node.status "Node status", node.mac "MAC Address", node.computername "Computer Name", node.pid "Owner", node.device_class "Device Class", node_category.name "Role"
joins= <<EOT
=>{class.security_event_id=security_event.security_event_id} class|class
=>{security_event.mac=node.mac} node|node
=>{node_category.category_id=node.category_id} node_category|node_category
EOT
node_fields=MAC Address
person_fields=Owner
date_field=start_date
base_conditions=security_event.status:=:open
role_fields=category_id
charts=scatter|Event date

[Security Events::Open Active]
type=sql
description=Active nodes with open security events
columns=owner,mac,status,start_date,security_event
sql= <<EOT
  SELECT
    n.pid AS owner,
    n.mac AS mac,
    v.status AS status,
    v.start_date AS start_date,
    c.description AS security_event
  FROM security_event v
  LEFT JOIN node n USING(mac)
  LEFT JOIN ip4log i USING(mac)
  LEFT JOIN class c
    ON c.security_event_id = v.security_event_id
  WHERE
    v.status="open"
    AND (i.end_time = 0 or i.end_time > NOW())
  ORDER BY n.pid;
EOT

has_limit=disabled
cursor_type=none
node_fields=mac
person_fields=owner
charts=scatter|start_date

[Security Events::Open All]
type=sql
description=All nodes with open security events
columns=owner,mac,status,start_date,security_event
sql= <<EOT
  SELECT
    n.pid AS owner,
    n.mac AS mac,
    v.status AS status,
    v.start_date AS start_date,
    c.description AS security_event
  FROM security_event v
  LEFT JOIN node n
    ON n.mac = v.mac
  LEFT JOIN class c
    ON c.security_event_id = v.security_event_id
  WHERE
    v.status = "open"
  ORDER BY n.pid;
EOT

has_limit=disabled
cursor_type=none
node_fields=mac
person_fields=owner
charts=scatter|start_date

[SSID::Active]
type=sql
description=Active SSID's
columns=ssid,nodes,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(1) as total
    FROM locationlog
    INNER JOIN node USING (mac)
    INNER JOIN ip4log USING (mac)
    WHERE
      ssid != ""
      AND (ip4log.end_time = 0 OR ip4log.end_time > NOW())
  )
  SELECT
    ssid,
    COUNT(1) AS nodes,
    ROUND( COUNT(1) / total.total * 100, 1) AS percent
  FROM locationlog
  INNER JOIN node USING (mac)
  INNER JOIN ip4log USING (mac),
  total
  WHERE
    ssid != ""
    AND (ip4log.end_time = 0 OR ip4log.end_time > NOW())
  GROUP BY ssid
  ORDER BY percent DESC;
EOT

has_limit=disabled
cursor_type=none
charts=pie|ssid:nodes,bar|ssid:nodes

[SSID::All]
type=sql
description=All SSID's
columns=ssid,nodes,percent
sql= <<EOT
  WITH total AS (
    SELECT
      COUNT(DISTINCT locationlog.mac) as total
    FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac)
    WHERE
      ssid != ""
      AND ip4log.start_time BETWEEN ? AND ?
  )
  SELECT
    ssid,
    COUNT(DISTINCT locationlog.mac) AS nodes,
    ROUND( COUNT(DISTINCT locationlog.mac) / total.total * 100, 1) AS percent
  FROM locationlog
    INNER JOIN node USING(mac)
    INNER JOIN ip4log USING(mac),
    total
  WHERE
  ssid != ""
  AND ip4log.end_time BETWEEN ? AND ?
  GROUP BY ssid
  ORDER BY percent DESC;
EOT
bindings=start_date,end_date,start_date,end_date
has_date_range=enabled
has_limit=disabled
cursor_type=none
charts=pie|ssid:nodes,bar|ssid:nodes

[Top Sponsors::All]
type=sql
description=Top sponsors
columns=contact_info,sponsor
sql= <<EOT
  SELECT
    contact_info,
    COUNT(contact_info) AS sponsor
  FROM activation
  WHERE
    type = 'sponsor'
  GROUP BY contact_info
  LIMIT ?;
EOT
bindings=limit
has_limit=enabled
cursor_type=none
default_limit=25

[User::Registration::Email]
type=abstract
# The table to search from
base_table=activation
# The columns to select
columns=activation.pid as "Owner", activation.mac "MAC Address", activation.activation_code as "Activation code", activation.expiration as "Code expiration", activation.unregdate as "Unreg date", activation.status as "Status", activation.portal as "Connection profile"
searches=string:Owner:activation.pid,string:MAC Address:activation.mac,string:Activation Code:activation.activation_code,string:Status:activation.status,string:Connection Profile:activation.portal
# Display only the email registration
base_conditions=activation.type:=:guest
base_conditions_operator=all
person_fields=Owner
node_fields=MAC Address
order_fields=-activation.expiration

[User::Registration::SMS]
type=abstract
# The table to search from
base_table=activation
# The columns to select
columns=activation.pid as "Owner", activation.mac "MAC Address", sms_carrier.name as "Carrier", activation.activation_code as "Activation code", activation.expiration as "Code expiration", activation.status as "Status", activation.portal as "Connection profile"
searches=string:Owner:activation.pid,string:MAC Address:activation.mac,string:Activation Code:activation.activation_code,string:Status:activation.status,string:Connection Profile:activation.portal
# Left join sms_carrier
joins==>{activation.carrier_id=sms_carrier.id} sms_carrier|sms_carrier
# Display only the sms registration
base_conditions=activation.type:=:sms
base_conditions_operator=all
person_fields=Owner
node_fields=MAC Address
order_fields=-activation.expiration

[User::Registration::Sponsor]
type=abstract
# The table to search from
base_table=activation
# The columns to select
columns=activation.pid as "Owner", activation.contact_info as "Sponsor", activation.mac "MAC Address",  activation.expiration as "Registration expiration", activation.status as "Status", activation.portal as "Connection profile",
searches=string:Owner:activation.pid,string:Sponsor:activation.contact_info,string:MAC Address:activation.mac,string:Status:activation.status,string:Connection Profile:activation.portal
date_field=expiration
# Display only the sponsor registration
base_conditions=activation.type:=:sponsor
base_conditions_operator=all
person_fields=Owner
node_fields=MAC Address
